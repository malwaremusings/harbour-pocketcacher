import QtQuick 2.0
import QtQuick.LocalStorage 2.0

Item {
    property var db
    property var results

    function getResults() {
        return results;
    }

    function doQuery(statement,values,fnResults) {
        if (db) {
            try {
                db.transaction(
                            function(tx) {
                                var results = tx.executeSql(statement,values);
                                if (fnResults) fnResults(results);
                            });
            } catch (e) {
                console.exception("[E] Database query (" + statement + ") failed: " + e);
            }
        } else {
            console.warn("[W] Attempt to run database query (" + statement + ") on invalid database handle");
        }
    }

    Component.onCompleted: {
        console.debug("Database.qml::onCompleted()");
        console.debug("    Initialising database");
        try {
            db = LocalStorage.openDatabaseSync("pocketcacher","0.1","Pocket Cacher database for storing stuff",1000);

            if (db) {
                db.transaction(
                            function(tx) {
                                // Create the database if it doesn't exist
                                // (after dropping it if it does :) )
                                //tx.executeSql("DROP TABLE IF EXISTS LogBook");
                                tx.executeSql("CREATE TABLE IF NOT EXISTS LogBook(name TEXT,timestamp REAL,date TEXT,time TEXT,type TEXT,finder TEXT,text TEXT)");
                            });
                /*
                 * need to connect this signal handler after calling refresh()
                 * as refresh() will add items to the model and trigger this
                 * signal handler!
                 *
                 * disable this in favour of updating the db then refreshing
                 * the model, rather than updating the model and updating the db
                 * as a result. this approach allows us to use thw rowid
                 * generated by sqlite as a unique id and since the model is
                 * refreshed from the db after adds, we can remove log entries
                 * there were added during this session
                 *
                 * code commented rather than removed as i may change my mind!
                 */

                // lstmodLogBook.onRowsInserted.connect(function (start,end,list) {
                //     console.debug("LogBookModel::ListModel::onRowsInserted(" + list + ")");
                //     console.debug(lstmodLogBook.get(end).name);
                //     itemLogBook.add(lstmodLogBook.get(end));
                // });
            }
        } catch (e) {
            console.debug("database creation failed: " + e);
        }
    }
}
